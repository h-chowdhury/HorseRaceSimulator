package Part2;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * This class defines the race panel.
 * The horse race animation will be displayed within this panel.
 * 
 * @author Humayra Chowdhury
 * @version Version 3.0
 */
public class RacePanel extends JPanel implements ActionListener {

  // Class variables of RacePanel
  private RaceData raceData;
  private int numberOfHorses;
  private int trackLength;
  private int laneCount;

  private Horse[] lanes;

  private ImageIcon trackBackground;

  private double FINISH_LINE_X;
  private Horse raceWinner;
  private JLabel winnerLabel;
  private JLabel winnerSymbol;

  private Timer timer;

  final int PANEL_HEIGHT = 620;
  final int PANEL_WIDTH = 1090;

  int[] xPosTrack;
  int[] yPosTrack;


  /**
   * Constructor of RacePanel
   */
  RacePanel (RaceData RD) {

    this.setLayout(new BorderLayout(5, 5));

    // Set background image
    trackBackground = new ImageIcon("Part2\\images\\straight track background.png");

    // Bottom panel
    JPanel bottomPanel = new JPanel();
    bottomPanel.setPreferredSize(new Dimension(30, 70));
    bottomPanel.setLayout(new GridLayout(1, 2));

      // Label to display winner
      winnerLabel = new JLabel();
      winnerLabel.setFont(new Font("Dialog", Font.BOLD, 20));
      bottomPanel.add(winnerLabel);

      // Label to display winner
      winnerSymbol = new JLabel(new ImageIcon());
      bottomPanel.add(winnerSymbol);

    this.add(bottomPanel, BorderLayout.SOUTH);
    this.setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));

    raceData = RD;

    numberOfHorses = raceData.getNumberOfHorses();
    trackLength = raceData.getLengthOfTrack();
    laneCount = raceData.getNumberOfLanes();
    lanes = raceData.getLanesArray();

    FINISH_LINE_X = (PANEL_WIDTH-70) * ((double) trackLength/500.0); // PANEL_WIDTH-45 is full length (500m)


    // Set velocity values (default = 5)
    setHorseVelocities();

    // Set positional values of horses (x and y)
    setHorsePositions();

    // Set positional values of track (x and y)
    setTrackPositions();

    timer = new Timer(100, this);
    timer.start();
  
  }

  /**
   * Draws the race components such as the horses and track lines.
   * @param g the graphics component that allows for drawing.
   */
  public void paintComponent(Graphics g) {
    super.paintComponent(g);
    Graphics2D g2D = (Graphics2D) g;

    // draw background
    g2D.drawImage(trackBackground.getImage(), 0, 0, getWidth(), getHeight(), this);

    // draw start and finish lines
    drawTrackLines(g2D);

    // update each horse repeatedly
    drawHorses(g2D);
  }


  /**
   * Moves the horses every 100 miliseconds
   * @param e represents the event generated by the Timer
   */
  @Override
  public void actionPerformed(ActionEvent e) {
    moveHorses();

    //if any of the horses has won the race is finished
    //if all of the three horses have fallen the race is finished
    if (allHaveFallen() || raceWonByAny()) {
        timer.stop();

        // Return null if there is no winner
        if (allHaveFallen()) {
          raceWinner = null;
          winnerLabel.setText("All horses have fallen, there is no winner!");
          winnerSymbol.setIcon(new ImageIcon("Part2\\images\\cross.png"));
        }
        else {
          raceWinner = getWinner();
          winnerLabel.setText(raceWinner.getName().toUpperCase() + " has won the race!");
          winnerSymbol.setIcon(raceWinner.getSymbol());
        }
    }
  
  }


  /**
   * Draws the track lines of the racing track including the
   * start and finish lines.
   * @param g2D The graphics object that allows for drawing
   */
  private void drawTrackLines(Graphics2D g2D) {
    // set paint colour
    g2D.setColor(new Color(0xDDB771));

    // draw start line
    g2D.fillRect(xPosTrack[0]-5, yPosTrack[0], 10, yPosTrack[laneCount]-25); 

    // draw finish line
    g2D.fillRect((int) FINISH_LINE_X, yPosTrack[0], 10, yPosTrack[laneCount]-25); 

  }


  /**
   * Draws the horses with updated positions to the panel
   * @param g2D The graphics object that allows for drawing
   */
  private void drawHorses(Graphics2D g2D) {
    // update each horse repeatedly
    for (int  i=0; i<laneCount; i++) {
      if (lanes[i] != null) {
        g2D.drawImage((lanes[i].getSymbol()).getImage(), lanes[i].getXpos(), lanes[i].getYpos(), null);
      }
    }
  }


  /**
   * Updates the positions of the horses (xPos) according to factors such
   * as the horse's confidence level.
   * May cause a horse to fall.
   */
  private void moveHorses() {
    // update each horses x position repeatedly
    for (int i=0; i<laneCount; i++) {
      // Check if the lane value is null (empty lane)
      if (lanes[i] != null && lanes[i].getXpos() <= FINISH_LINE_X && (lanes[i].hasFallen() == false)) {

        //the probability that the horse will move forward depends on the confidence;
        if (Math.random() < lanes[i].getConfidence())
        {
          int xPos = lanes[i].getXpos();
          int xVelocity = lanes[i].getXVelocity();
          lanes[i].setXpos(xPos + xVelocity);
        }
        
        //the probability that the horse will fall is very small (max is 0.1)
        //but will also will depends exponentially on confidence 
        //so if you double the confidence, the probability that it will fall is *2
        if (Math.random() < (0.1*lanes[i].getConfidence()/16))
        {
          lanes[i].fall();
          // Set horse icon to an X to indicate it has fallen
          lanes[i].setSymbol(new ImageIcon("Part2\\images\\cross.png"));
        }
      }
    }
    repaint();
  }


  /**
   * Sets the values of each horses velocity
   * Current default values are xVel=5, yVel=1
   */
  private void setHorseVelocities () {
    for (int i=0; i<laneCount; i++) {
      // Check if the lane value is null (empty lane)
      if (lanes[i] != null) {
        lanes[i].setXVelocity(5);
        lanes[i].setYVelocity(1);
      }
    }
  }


  /**
   * Sets the values of each horses x and y positions
   */
  private void setHorsePositions () {
    for (int i=0; i<laneCount; i++) {
      // Check if the lane value is null (empty lane)
      if (lanes[i] != null) {
        lanes[i].setXpos(15);
        lanes[i].setYpos(15 + (i*72)); 
      }
    }
  }


   /**
   * Sets the values of track x and y positions
   */
  private void setTrackPositions () {
    xPosTrack = new int[laneCount + 1];
    yPosTrack = new int[laneCount + 1];
    
    for (int i=0; i<=laneCount; i++) {
      xPosTrack[i] = 15;
      yPosTrack[i] = 15 + (i*72);
    }
  }


  /** 
   * Determines if a horse has won the race
   *
   * @param theHorse The horse we are testing
   * @return true if the horse has won, false otherwise.
   */
  private boolean raceWonBy(Horse theHorse) {
    if (theHorse.getXpos() >= FINISH_LINE_X)
    {
      return true;
    }
    return false;
  }


  /** 
   * Determines if any horse has won the race
   * Uses the raceWonBy method
   */
  private boolean raceWonByAny()
  {
      for (int i=0; i<lanes.length; i++) {
          if (lanes[i] != null && raceWonBy(lanes[i]) == true) {
              raceWinner = lanes[i];
              return true;
          }
          
      }
      return false;
  }


  /** 
   * Determines if all horses have fallen
   * Ends the race if this is true.
   */
  private boolean allHaveFallen() {
      for (int i=0; i<lanes.length; i++) {
          if (lanes[i] != null && lanes[i].hasFallen() != true) {
              return false;
          }  
      }
      return true;
  }


  private Horse getWinner() {
    for (int i=0; i<lanes.length; i++) {
      if (lanes[i] != null && lanes[i].getXpos() >= FINISH_LINE_X) {
          return lanes[i];
      }  
    }
    // fall-back return type in case of error
    return null;
  }

}
